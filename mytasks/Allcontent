====================
üì• TextInput
====================
O que √©: Componente de entrada de texto, usado para capturar dados do usu√°rio.
Propriedades:

- placeholder: Texto exibido quando o campo est√° vazio.
- value: Valor atual do campo (ligado ao estado newTask).
- onChangeText: Fun√ß√£o chamada quando o texto muda.
- placeholderTextColor: Cor do texto do placeholder.
- style: Objeto de estilo aplicado ao campo.
- (Extras poss√≠veis): secureTextEntry, keyboardType, maxLength, etc.

====================
üîò TouchableOpacity
====================
O que √©: Bot√£o sens√≠vel ao toque que altera sua opacidade quando pressionado.
Propriedades:

- onPress: Fun√ß√£o chamada quando o bot√£o √© pressionado.
- style: Estilo visual do bot√£o.
- activeOpacity: Define quanta opacidade aplicar ao tocar (0 a 1).
- (Extras poss√≠veis): disabled, hitSlop, delayPressIn, etc.

====================
üìÑ Text
====================
O que √©: Componente para exibir textos na tela.
Propriedades:

- style: Estilo do texto (cor, tamanho, peso, etc).
- (Extras poss√≠veis): numberOfLines, ellipsizeMode, etc.

====================
üì¶ View
====================
O que √©: Cont√™iner gen√©rico para layout e posicionamento de elementos.
Propriedades:

- style: Estilo aplicado √† View (largura, altura, flex, padding...).
- (Extras poss√≠veis): onLayout, pointerEvents, etc.

====================
üõü SafeAreaView
====================
O que √©: Garante que o conte√∫do fique dentro da √°rea segura da tela.
Propriedades:

- style: Estilo aplicado √† √°rea segura.
- (Extras poss√≠veis): edges, mode, etc.

====================
üß† useState (React Hook)
====================
O que √©: Hook usado para criar e manipular estado em componentes funcionais.
Exemplo:
const [newTask, setNewTask] = React.useState('');

- newTask: valor atual
- setNewTask: fun√ß√£o para atualizar esse valor

====================
üßæ FlatList
====================
O que √©: Lista de rolagem otimizada, ideal para grandes quantidades de dados.
Propriedades:

- data: Array de dados a ser exibido.
- renderItem: Fun√ß√£o que renderiza cada item da lista.
- keyExtractor: Fun√ß√£o que retorna uma chave √∫nica por item.
- (Extras poss√≠veis): horizontal, ListHeaderComponent, onEndReached, etc.

====================
üß© StyleSheet
====================
O que √©: API para organizar estilos, melhorando performance e organiza√ß√£o.
Exemplo:
const styles = StyleSheet.create({
container: {
flex: 1,
padding: 20,
},
});

====================
üåê SafeAreaProvider
====================
O que √©: Componente que envolve o app para ativar o suporte √† √°rea segura.
Fun√ß√£o: Fornece contexto de √°rea segura para SafeAreaView funcionar corretamente.

====================
üìö registerRootComponent
====================
O que √©: Fun√ß√£o do Expo que registra o componente raiz do app.
Fun√ß√£o: Garante que o app inicie corretamente no ambiente do Expo.
Exemplo:
registerRootComponent(App);

====================
üß± TaskList (componente customizado)
====================
O que √©: Componente personalizado para exibir tarefas.
Propriedades:

- tasks: Array de tarefas com id e title.
- Internamente usa FlatList para renderizar os itens.
- renderItem: Renderiza cada tarefa com Text e TouchableOpacity.
